// <auto-generated />
using System;
using INTEX.API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace INTEX.API.Migrations
{
    [DbContext(typeof(MoviesContext))]
    [Migration("20250409074847_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("INTEX.API.Models.LoginCredentials", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("AdminStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("admin_status");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<bool?>("LockoutEndBool")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("login_credentials", (string)null);
                });

            modelBuilder.Entity("INTEX.API.Models.MoviesRating", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("ShowId")
                        .HasColumnType("text")
                        .HasColumnName("show_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("UserId", "ShowId");

                    b.ToTable("movies_ratings", (string)null);
                });

            modelBuilder.Entity("INTEX.API.Models.MoviesTitle", b =>
                {
                    b.Property<int?>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<int?>("Adventure")
                        .HasColumnType("integer")
                        .HasColumnName("adventure");

                    b.Property<int?>("AnimeSeriesInternationalTvShows")
                        .HasColumnType("integer")
                        .HasColumnName("Anime Series International TV Shows");

                    b.Property<int?>("BritishTvShowsDocuseriesInternationalTvShows")
                        .HasColumnType("integer")
                        .HasColumnName("British TV Shows Docuseries International TV Shows");

                    b.Property<string>("Cast")
                        .HasColumnType("text")
                        .HasColumnName("cast");

                    b.Property<int?>("Children")
                        .HasColumnType("integer")
                        .HasColumnName("children");

                    b.Property<int?>("Comedies")
                        .HasColumnType("integer")
                        .HasColumnName("comedies");

                    b.Property<int?>("ComediesDramasInternationalMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Comedies Dramas International Movies");

                    b.Property<int?>("ComediesInternationalMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Comedies International Movies");

                    b.Property<int?>("ComediesRomanticMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Comedies Romantic Movies");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int?>("CrimeTvShowsDocuseries")
                        .HasColumnType("integer")
                        .HasColumnName("Crime TV Shows Docuseries");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasColumnType("text")
                        .HasColumnName("director");

                    b.Property<int?>("Documentaries")
                        .HasColumnType("integer")
                        .HasColumnName("documentaries");

                    b.Property<int?>("DocumentariesInternationalMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Documentaries International Movies");

                    b.Property<int?>("Docuseries")
                        .HasColumnType("integer")
                        .HasColumnName("docuseries");

                    b.Property<int?>("Dramas")
                        .HasColumnType("integer")
                        .HasColumnName("dramas");

                    b.Property<int?>("DramasInternationalMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Dramas International Movies");

                    b.Property<int?>("DramasRomanticMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Dramas Romantic Movies");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<int?>("FamilyMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Family Movies");

                    b.Property<int?>("Fantasy")
                        .HasColumnType("integer")
                        .HasColumnName("fantasy");

                    b.Property<int?>("HorrorMovies")
                        .HasColumnType("integer")
                        .HasColumnName("Horror Movies");

                    b.Property<int?>("InternationalMoviesThrillers")
                        .HasColumnType("integer")
                        .HasColumnName("International Movies Thrillers");

                    b.Property<int?>("InternationalTvShowsRomanticTvShowsTvDramas")
                        .HasColumnType("integer")
                        .HasColumnName("International TV Shows Romantic TV Shows TV Dramas");

                    b.Property<int?>("KidsTv")
                        .HasColumnType("integer")
                        .HasColumnName("Kids' TV");

                    b.Property<int?>("LanguageTvShows")
                        .HasColumnType("integer")
                        .HasColumnName("Language TV Shows");

                    b.Property<int?>("Musicals")
                        .HasColumnType("integer")
                        .HasColumnName("musicals");

                    b.Property<int?>("NatureTv")
                        .HasColumnType("integer")
                        .HasColumnName("Nature TV");

                    b.Property<string>("Rating")
                        .HasColumnType("text")
                        .HasColumnName("rating");

                    b.Property<int?>("RealityTv")
                        .HasColumnType("integer")
                        .HasColumnName("Reality TV");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("integer")
                        .HasColumnName("release_year");

                    b.Property<string>("ShowId")
                        .HasColumnType("text")
                        .HasColumnName("show_id");

                    b.Property<int?>("Spirituality")
                        .HasColumnType("integer")
                        .HasColumnName("spirituality");

                    b.Property<int?>("TalkShowsTvComedies")
                        .HasColumnType("integer")
                        .HasColumnName("Talk Shows TV Comedies");

                    b.Property<int?>("Thrillers")
                        .HasColumnType("integer")
                        .HasColumnName("thrillers");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("TvAction")
                        .HasColumnType("integer")
                        .HasColumnName("TV Action");

                    b.Property<int?>("TvComedies")
                        .HasColumnType("integer")
                        .HasColumnName("TV Comedies");

                    b.Property<int?>("TvDramas")
                        .HasColumnType("integer")
                        .HasColumnName("TV Dramas");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.ToTable("movies_titles", (string)null);
                });

            modelBuilder.Entity("INTEX.API.Models.MoviesUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<int?>("AmazonPrime")
                        .HasColumnType("integer")
                        .HasColumnName("Amazon Prime");

                    b.Property<int?>("AppleTv")
                        .HasColumnType("integer")
                        .HasColumnName("Apple TV+");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int?>("Disney")
                        .HasColumnType("integer")
                        .HasColumnName("Disney+");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<int?>("Hulu")
                        .HasColumnType("integer")
                        .HasColumnName("hulu");

                    b.Property<int?>("Max")
                        .HasColumnType("integer")
                        .HasColumnName("max");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Netflix")
                        .HasColumnType("integer")
                        .HasColumnName("netflix");

                    b.Property<int?>("Paramount")
                        .HasColumnType("integer")
                        .HasColumnName("Paramount+");

                    b.Property<int?>("Peacock")
                        .HasColumnType("integer")
                        .HasColumnName("peacock");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int?>("Zip")
                        .HasColumnType("integer")
                        .HasColumnName("zip");

                    b.HasKey("UserId");

                    b.ToTable("movies_users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("INTEX.API.Models.LoginCredentials", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("INTEX.API.Models.LoginCredentials", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INTEX.API.Models.LoginCredentials", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("INTEX.API.Models.LoginCredentials", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
